# -*- coding: utf-8 -*-
"""DenseNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15dZ57vO7enViy7du-ss8UumQe1L7KVlt
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import PIL
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.applications.densenet import DenseNet121
from keras.models import Sequential
from keras.layers import Dense, GlobalAveragePooling2D
from keras.optimizers import Adam
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from keras.models import load_model

input_shape = (224, 224, 3)
num_classes =20
batch_size = 32
epochs = 15
data_dir = '/content/drive/MyDrive/data/data'

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.2
)

train_generator = train_datagen.flow_from_directory(
    data_dir,
    target_size=(input_shape[0], input_shape[1]),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

validation_generator = train_datagen.flow_from_directory(
    data_dir,
    target_size=(input_shape[0], input_shape[1]),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

# Build the DenseNet model
def build_densenet_model():
    base_model = DenseNet121(include_top=False, weights='imagenet', input_shape=input_shape)
    model = Sequential()
    model.add(base_model)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(256, activation='relu'))
    model.add(Dense(num_classes, activation='softmax'))
    return model

# Create the model
model = build_densenet_model()

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])

model.fit_generator(
    train_generator,
    steps_per_epoch=train_generator.n // batch_size,
    epochs=15,
    validation_data=validation_generator,
    validation_steps=validation_generator.n // batch_size
)

model.save('/content/drive/MyDrive/model_15epochs/densenet_model.h5')
model.save_weights('/content/drive/MyDrive/model_15epochs/model_weights.h5')
model.save('//content/drive/MyDrive/model_15epochs/model_model')
model.save('/content/drive/MyDrive/model_15epochs/my_model.keras')

labels = {value: key for key, value in validation_generator.class_indices.items()}

print("Label Mappings for classes present in the training and validation datasets\n")
for key, value in labels.items():
    print(f"{key} : {value}")

import os
import cv2
import keras
import numpy as np
from keras.preprocessing import image
from keras.applications.densenet import preprocess_input, decode_predictions
from keras.models import load_model
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def preprocess_image(image_path):
    img = image.load_img(image_path, target_size=(224, 224))
    img = image.img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img = preprocess_input(img)
    return img

def predict_class(folder_path, model):
    images = []
    image_paths = []

    for filename in os.listdir(folder_path):
        if filename.endswith(('.jpg', '.jpeg', '.png')):
            image_path = os.path.join(folder_path, filename)
            img = preprocess_image(image_path)
            images.append(img)
            image_paths.append(image_path)

    images = np.vstack(images)

    predictions = model.predict(images)

    predicted_labels = [labels[np.argmax(pred)] for pred in predictions]

    for i in range(len(image_paths)):
        img = mpimg.imread(image_paths[i])
        plt.imshow(img)
        plt.axis('off')
        plt.title('Predicted Class: {}'.format(predicted_labels[i]))
        plt.show()
        print("============================================================")

# Load the trained DenseNet121 model
model = load_model('/content/drive/MyDrive/model_15epochs/densenet_model.h5')

folder_path = '/content/preds'

predict_class(folder_path, model)